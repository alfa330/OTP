import logging
import os
import threading
import asyncio
from hashlib import sha256
import pandas as pd
import requests
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from io import StringIO
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import TelegramAPIError
from flask import Flask, request, jsonify
from functools import wraps
from openpyxl import load_workbook
import re
import xlsxwriter
from io import BytesIO

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====================================================================================================
logging.basicConfig(level=logging.INFO)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è =========================================================================================
API_TOKEN = os.getenv('BOT_TOKEN')
admin = int(os.getenv('ADMIN_ID', '0'))
SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')
SHEET_NAME = os.getenv('SHEET_NAME')
FLASK_API_KEY = os.getenv('FLASK_API_KEY')

if not API_TOKEN:
    raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.")
if not FLASK_API_KEY:
    raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è FLASK_API_KEY –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.")

FETCH_URL = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv&sheet={SHEET_NAME}"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ =============================================================================
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# === –í —Ä–æ–ª–∏ –î–ë ==================================================================================================
SVlist = {}

class SV:
    def __init__(self, name, id):
        self.name = name
        self.id = id
        self.table = ''
        self.calls = {}

# === Flask-—Å–µ—Ä–≤–µ—Ä ===============================
app = Flask(__name__)

def require_api_key(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        api_key = request.headers.get('X-API-Key')
        if api_key and api_key == FLASK_API_KEY:
            return f(*args, **kwargs)
        else:
            return jsonify({"error": "Invalid or missing API key"}), 401
    return decorated

@app.route('/')
def index():
    return "Bot is alive!", 200

@app.route('/api/call_evaluation', methods=['POST'])
@require_api_key
def receive_call_evaluation():
    global SVlist
    try:
        data = request.get_json()
        required_fields = ['evaluator', 'operator', 'month', 'call_number', 'phone_number', 'score', 'comment']
        if not data or not all(field in data for field in required_fields):
            return jsonify({"error": "Missing or invalid required fields"}), 400

        for field in required_fields:
            if not isinstance(data[field], (str, int, float)):
                return jsonify({"error": f"Invalid type for {field}"}), 400
        b = 1
        hint = ""
        for t in SVlist:
            if SVlist[t].name == data['evaluator']:
                b = 0
                if data['month'] in SVlist[t].calls:
                    if data['call_number'] in SVlist[t].calls[data['month']]:
                        hint += " - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏!"
                    else:
                        SVlist[t].calls[data['month']][data['call_number']] = data
                else:
                    SVlist[t].calls[data['month']] = {}
                    SVlist[t].calls[data['month']][data['call_number']] = data
                break
        
        if b:
            hint += " –û—Ü–µ–Ω–∏–≤–∞—é—â–µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤!"
                
        message = (
            f"üìû <b>–û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–∞</b>\n" 
            f"üë§ –û—Ü–µ–Ω–∏–≤–∞—é—â–∏–π: <b>{data['evaluator']}</b>\n"
            f"üìã –û–ø–µ—Ä–∞—Ç–æ—Ä: <b>{data['operator']}</b>\n"
            f"üìÑ –ó–∞ –º–µ—Å—è—Ü: <b>{data['month']}</b>\n"
            f"üìû –ó–≤–æ–Ω–æ–∫: <b>‚Ññ{data['call_number']}</b>\n"
            f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{data['phone_number']}</b>\n"
            f"üíØ –û—Ü–µ–Ω–∫–∞: <b>{data['score']}</b>\n"
        )
        if data['score'] < 100 and data['comment']:
            message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \n{data['comment']}\n"
        message += "\n" + hint

        telegram_url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
        payload = {
            "chat_id": admin,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(telegram_url, json=payload, timeout=10)
        
        if response.status_code != 200:
            error_detail = response.json().get('description', 'Unknown error')
            logging.error(f"Telegram API error: {error_detail}")
            return jsonify({"error": f"Failed to send Telegram message: {error_detail}"}), 500

        return jsonify({"status": "success"}), 200
    except requests.RequestException as re:
        logging.error(f"HTTP request error: {re}")
        return jsonify({"error": f"Failed to send Telegram message: {str(re)}"}), 500
    except Exception as e:
        logging.error(f"Error processing call evaluation: {e}")
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

def run_flask():
    app.run(host='0.0.0.0', port=8080, debug=False)

# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ =======================================================================================
last_hash = None

# === –ö–ª–∞—Å—Å—ã =====================================================================================================
class new_sv(StatesGroup):
    svname = State()
    svid = State()

class sv(StatesGroup):
    crtable = State()
    delete = State()
    verify_table = State()
    view_evaluations = State()
    change_table = State()

def get_current_week_of_month():
    today = datetime.now()
    # –î–µ–ª–∏–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –Ω–∞ 7, –æ–∫—Ä—É–≥–ª—è—è –≤–≤–µ—Ä—Ö
    week_number = (today.day - 1) // 7 + 1
    return week_number

def get_expected_calls(week_number):
    # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (5 –∑–≤–æ–Ω–∫–æ–≤ –≤ –Ω–µ–¥–µ–ª—é)
    return week_number * 5

# Helper function to create cancel keyboard
def get_cancel_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå'))
    return kb

# Helper function to create admin keyboard
def get_admin_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–†–µ–¥–∞–∫—Ç–æ—Ä –°–íüìù'))
    kb.insert(KeyboardButton('–û—Ü–µ–Ω–∫–∏üìä'))
    return kb

# Helper function to create verification keyboard
def get_verify_keyboard():
    ikb = InlineKeyboardMarkup(row_width=2)
    ikb.add(
        InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="verify_yes"),
        InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="verify_no")
    )
    return ikb

# Helper function to create editor keyboard
def get_editor_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –°–í‚ûï'))
    kb.insert(KeyboardButton('–£–±—Ä–∞—Ç—å –°–í‚ùå'))
    kb.add(KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –°–íüîÑ'))
    kb.add(KeyboardButton('–ù–∞–∑–∞–¥ üîô'))
    return kb

# Global cancel handler
@dp.message_handler(regexp='–û—Ç–º–µ–Ω–∞ ‚ùå', state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    kb = get_admin_keyboard() if message.from_user.id == admin else ReplyKeyboardRemove()
    await bot.send_message(
        chat_id=message.from_user.id,
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        parse_mode='HTML',
        reply_markup=kb
    )
    await message.delete()

# === –ö–æ–º–∞–Ω–¥—ã ====================================================================================================
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.delete()
    if message.from_user.id == admin:
        await bot.send_message(
            chat_id=message.from_user.id,
            text="<b>–ë–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏ –ø—Ä–æ—Å–ª—É—à–µ–∫.",
            parse_mode='HTML',
            reply_markup=get_admin_keyboard()
        )
    else:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        if message.from_user.id in SVlist:
            kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—Éüìë'))
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f"<b>–ë–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–¢–≤–æ–π <b>ID</b> —á—Ç–æ –±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ:\n\n<pre>{message.from_user.id}</pre>",
            parse_mode='HTML',
            reply_markup=kb
        )

# === –ê–¥–º–∏–Ω–∫–∞ ===================================================================================================
@dp.message_handler(regexp='–†–µ–¥–∞–∫—Ç–æ—Ä –°–íüìù')
async def editor_sv(message: types.Message):
    if message.from_user.id == admin:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='<b>–†–µ–¥–∞–∫—Ç–æ—Ä —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤</b>',
            parse_mode='HTML',
            reply_markup=get_editor_keyboard()
        )
    await message.delete()

@dp.message_handler(regexp='–ù–∞–∑–∞–¥ üîô')
async def back_to_admin(message: types.Message):
    if message.from_user.id == admin:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
            parse_mode='HTML',
            reply_markup=get_admin_keyboard()
        )
    await message.delete()

@dp.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å –°–í‚ûï')
async def newSv(message: types.Message):
    if message.from_user.id == admin:
        await bot.send_message(
            text='<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–í, —ç—Ç–∞–ø</b>: 1 –∏–∑ 2üìç\n\n–§–ò–û –Ω–æ–≤–æ–≥–æ –°–íüñä',
            chat_id=message.from_user.id,
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        await new_sv.svname.set()
    await message.delete()

@dp.message_handler(state=new_sv.svname)
async def newSVname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['svname'] = message.text
    await message.answer(
        text=f'–ö–ª–∞—Å—Å, –§–ò–û - <b>{message.text}</b>\n\n<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–í, —ç—Ç–∞–ø</b>: 2 –∏–∑ 2üìç\n\n–ù–∞–ø–∏—à–∏—Ç–µ <b>ID</b> –Ω–æ–≤–æ–≥–æ –°–íüÜî',
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )
    await new_sv.next()
    await message.delete()

@dp.message_handler(state=new_sv.svid)
async def newSVid(message: types.Message, state: FSMContext):
    try:
        sv_id = int(message.text)
        async with state.proxy() as data:
            data['svid'] = sv_id
        kb_sv = ReplyKeyboardMarkup(resize_keyboard=True)
        kb_sv.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—Éüìë'))
        await bot.send_message(
            chat_id=sv_id,
            text=f"–ü—Ä–∏–Ω—è—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ <b>—É—Å–ø–µ—à–Ω–æ‚úÖ</b>\n\n–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –ù–∞–∂–º–∏—Ç–µ <b>–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—Éüìë</b> —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ.",
            parse_mode='HTML',
            reply_markup=kb_sv
        )
        SVlist[sv_id] = SV(data['svname'], sv_id)
        await message.answer(
            text=f'–ö–ª–∞—Å—Å, ID - <b>{message.text}</b>\n\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–í –ø—Ä–æ—à–ª–æ <b>—É—Å–ø–µ—à–Ω–æ‚úÖ</b>. –ù–æ–≤–æ–º—É —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—É –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞üëåüèº',
            parse_mode='HTML',
            reply_markup=get_editor_keyboard()
        )
        await state.finish()
    except:
        await message.answer(
            text='–û–π, –ø–æ—Ö–æ–∂–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—Ç <b>ID</b>‚ùå\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>',
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
    await message.delete()

@dp.message_handler(regexp='–£–±—Ä–∞—Ç—å –°–í‚ùå')
async def delSv(message: types.Message):
    if message.from_user.id == admin:
        if SVlist:
            await bot.send_message(
                text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –°–í –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∏—Å–∫–ª—é—á–∏—Ç—åüñä</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
            ikb = InlineKeyboardMarkup(row_width=1)
            for i in SVlist:
                ikb.insert(InlineKeyboardButton(text=SVlist[i].name, callback_data=str(i)))
            await bot.send_message(
                text='<b>–õ–∏—Å—Ç –°–í:</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=ikb
            )
            await sv.delete.set()
        else:
            await bot.send_message(
                text='<b>–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –°–íü§•</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=get_editor_keyboard()
            )
    await message.delete()

@dp.callback_query_handler(state=sv.delete)
async def delSVcall(callback: types.CallbackQuery, state: FSMContext):
    SV = SVlist[int(callback.data)]
    del SVlist[int(callback.data)]
    await bot.send_message(
        text=f"–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä <b>{SV.name}</b> —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã‚úÖ",
        chat_id=admin,
        parse_mode='HTML',
        reply_markup=get_editor_keyboard()
    )
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await bot.send_message(
        text=f"–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã‚ùå",
        chat_id=SV.id,
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.finish()

@dp.message_handler(regexp='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –°–íüîÑ')
async def change_sv_table(message: types.Message):
    if message.from_user.id == admin:
        if SVlist:
            await bot.send_message(
                text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –°–í, —á—å—é —Ç–∞–±–ª–∏—Ü—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—åüñä</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
            ikb = InlineKeyboardMarkup(row_width=1)
            for i in SVlist:
                ikb.insert(InlineKeyboardButton(text=SVlist[i].name, callback_data=f"change_table_{i}"))
            await bot.send_message(
                text='<b>–õ–∏—Å—Ç –°–í:</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=ikb
            )
            await sv.change_table.set()
        else:
            await bot.send_message(
                text='<b>–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –°–íü§•</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=get_editor_keyboard()
            )
    await message.delete()

@dp.callback_query_handler(state=sv.change_table)
async def select_sv_for_table_change(callback: types.CallbackQuery, state: FSMContext):
    sv_id = int(callback.data.split('_')[2])
    async with state.proxy() as data:
        data['sv_id'] = sv_id
    await bot.send_message(
        chat_id=admin,
        text=f'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –û–ö–ö –¥–ª—è {SVlist[sv_id].name}üñä</b>',
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await sv.crtable.set()

@dp.message_handler(regexp='–û—Ü–µ–Ω–∫–∏üìä')
async def view_evaluations(message: types.Message):
    if message.from_user.id == admin:
        if SVlist:
            await bot.send_message(
                text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —á—å–∏ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
            ikb = InlineKeyboardMarkup(row_width=1)
            for i in SVlist:
                ikb.insert(InlineKeyboardButton(text=SVlist[i].name, callback_data=f"eval_{i}"))
            await bot.send_message(
                text='<b>–õ–∏—Å—Ç –°–í:</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=ikb
            )
            await sv.view_evaluations.set()
        else:
            await bot.send_message(
                text='<b>–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –°–íü§•</b>',
                chat_id=admin,
                parse_mode='HTML',
                reply_markup=get_admin_keyboard()
            )
    await message.delete()

@dp.callback_query_handler(state=sv.view_evaluations)
async def show_evaluations(callback: types.CallbackQuery, state: FSMContext):
    sv_id = int(callback.data.split('_')[1])
    sv = SVlist[sv_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –º–µ—Å—è—Ü–∞
    current_week = get_current_week_of_month()
    expected_calls = get_expected_calls(current_week)
    
    # Get operators, call counts, and average scores from SV's table
    sheet_name, operators, error = extract_fio_and_links(sv.table) if sv.table else (None, [], "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if error:
        await bot.send_message(
            chat_id=admin,
            text=f"–û—à–∏–±–∫–∞: {error}",
            parse_mode='HTML',
            reply_markup=get_admin_keyboard()
        )
        await state.finish()
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
    max_name_length = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º
    max_count_length = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤
    max_score_length = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
    
    message_text = (
        f"<b>–û—Ü–µ–Ω–∫–∏ {sv.name} (–Ω–µ–¥–µ–ª—è {current_week}):</b>\n"
        f"<i>–û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_calls} –∑–≤–æ–Ω–∫–æ–≤ (–ø–æ 5 –≤ –Ω–µ–¥–µ–ª—é)</i>\n\n"
    )
    
    # –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–æ–Ω–∫–æ–≤
    operators_with_issues = []
    
    if operators:
        for op in operators:
            name = op.get('name', '').strip()
            if not name:
                continue

            # –°–æ–∫—Ä–∞—â–∞–µ–º –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –§–ò–û
            display_name = (name[:max_name_length - 1] + '‚Ä¶') if len(name) > max_name_length else name

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
            call_count = op.get('call_count')
            score = op.get('avg_score')

            if call_count in [None, "#DIV/0!"]:
                call_count = 0
            else:
                try:
                    call_count = int(call_count)
                except (ValueError, TypeError):
                    call_count = 0

            try:
                score_val = float(score) if score else None
            except (ValueError, TypeError):
                score_val = 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏ –æ—Ü–µ–Ω–∫–∏
            if call_count < expected_calls:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–æ–Ω–∫–æ–≤
                if call_count == 0:
                    c_color_icon = "üî¥"  # –ù–µ—Ç –∑–≤–æ–Ω–∫–æ–≤
                elif call_count < (expected_calls * 0.5):
                    c_color_icon = "üü†"  # –ú–µ–Ω–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã
                else:
                    c_color_icon = "üü°"  # –ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã, –Ω–æ –Ω–µ –≤—Å–µ
                operators_with_issues.append({
                    'name': name,
                    'sv_id': sv_id,
                    'call_count': call_count,
                    'expected': expected_calls
                })
            else:
                c_color_icon="üü¢"
            # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–æ–Ω–∫–æ–≤, —Å–º–æ—Ç—Ä–∏–º –æ—Ü–µ–Ω–∫—É
            if score_val is None:
                color_icon = "-"
                score_str = "-"
            elif score_val < 60:
                color_icon = "üî¥"
                score_str = f"{score_val:.2f}"
            elif score_val < 90:
                color_icon = "üü°"
                score_str = f"{score_val:.2f}"
            else:
                color_icon = "üü¢"
                score_str = f"{score_val:.2f}"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            message_text += f"üë§ {display_name}\n"
            message_text += f"   {str(call_count).rjust(max_count_length)} {c_color_icon} –∑–≤–æ–Ω. | {score_str.rjust(max_score_length)} {color_icon}\n\n"
    else:
        message_text += "–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º—ã
    ikb = InlineKeyboardMarkup(row_width=1)
    if operators_with_issues:
        message_text += "\n<b>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–æ–Ω–∫–æ–≤:</b>"
        for op in operators_with_issues:
            btn_text = f"{op['name']} ({op['call_count']}/{op['expected']})"
            op_name=op['name'].split(" ")[1]
            callback_data=f"notify_sv_{sv_id}_{op_name}"
            ikb.add(InlineKeyboardButton(
                text=btn_text,
                callback_data=callback_data
            ))

    await bot.send_message(
        chat_id=admin,
        text=message_text,
        parse_mode='HTML',
        reply_markup=ikb if operators_with_issues else get_admin_keyboard()
    )
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'generate_monthly_report', state=sv.view_evaluations)
async def handle_generate_monthly_report(callback: types.CallbackQuery, state: FSMContext):
    try:
        await bot.send_message(
            chat_id=admin,
            text="üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...",
            parse_mode='HTML'
        )
        await generate_weekly_report()  # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        await bot.answer_callback_query(
            callback.id,
            text="–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            show_alert=False
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await bot.answer_callback_query(
            callback.id,
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
            show_alert=True
        )
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await bot.send_message(
        chat_id=admin,
        text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
        parse_mode='HTML',
        reply_markup=get_admin_keyboard()
    )
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('notify_sv_'))
async def notify_supervisor(callback: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: notify_sv_{sv_id}_{operator_name}
        parts = callback.data.split('_')
        sv_id = int(parts[2])
        operator_name = ' '.join(parts[3:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∏–º–µ–Ω–∏
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –∏ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤
        current_week = get_current_week_of_month()
        expected_calls = get_expected_calls(current_week)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –°–í
        if sv_id in SVlist:
            sv = SVlist[sv_id]
            notification_text = (
                f"‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
                f"–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ <b>{operator_name}</b> –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤.\n"
                f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {current_week}\n"
                f"–û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_calls} –∑–≤–æ–Ω–∫–æ–≤ (–ø–æ 5 –≤ –Ω–µ–¥–µ–ª—é)\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–≤–æ–Ω–∫–∏."
            )
            
            await bot.send_message(
                chat_id=sv_id,
                text=notification_text,
                parse_mode='HTML'
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
            await bot.answer_callback_query(
                callback.id,
                text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –°–í {sv.name}",
                show_alert=False
            )
        else:
            await bot.answer_callback_query(
                callback.id,
                text="–û—à–∏–±–∫–∞: –°–í –Ω–µ –Ω–∞–π–¥–µ–Ω",
                show_alert=True
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ notify_supervisor: {e}")
        await bot.answer_callback_query(
            callback.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            show_alert=True
        )

# === –†–∞–±–æ—Ç–∞ —Å –°–í –∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ ===================================================================================
def extract_fio_and_links(spreadsheet_url):
    try:
        # Extract file_id from Google Sheets URL
        match = re.search(r"/d/([a-zA-Z0-9_-]+)", spreadsheet_url)
        if not match:
            return None, None, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Sheets."
        file_id = match.group(1)
        export_url = f"https://docs.google.com/spreadsheets/d/{file_id}/export?format=xlsx"

        # Download the file
        response = requests.get(export_url)
        if response.status_code != 200:
            return None, None, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É–±–ª–∏—á–Ω–æ."
        
        # Save the file temporarily
        temp_file = "temp_table.xlsx"
        with open(temp_file, "wb") as f:
            f.write(response.content)

        # Load the Excel file with data_only=True to get computed values
        wb = load_workbook(temp_file, data_only=True)
        ws = wb.worksheets[-1]  # Use the last sheet
        sheet_name = ws.title

        # Find the –§–ò–û column and columns for calls and average score
        fio_column = None
        calls_column = None
        score_column = None
        for col in ws.iter_cols(min_row=1, max_row=1):
            for cell in col:
                if cell.value:
                    value = str(cell.value).strip()
                    if "–§–ò–û" in value:
                        fio_column = cell.column
                    elif "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤" in value or "–ü—Ä–æ—Å–ª—É—à–∞–Ω–æ" in value:
                        calls_column = cell.column
                    elif "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª" in value or "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞" in value:
                        score_column = cell.column
            if fio_column and calls_column:
                break

        if not fio_column:
            os.remove(temp_file)
            return None, None, "–û—à–∏–±–∫–∞: –ö–æ–ª–æ–Ω–∫–∞ –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç–µ."
        if not calls_column:
            os.remove(temp_file)
            return None, None, "–û—à–∏–±–∫–∞: –ö–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        # Extract –§–ò–û, hyperlinks, call counts, and average scores
        operators = []
        for row in ws.iter_rows(min_row=2):
            fio_cell = row[fio_column - 1]
            if not fio_cell.value:
                break
            operator_info = {
                "name": fio_cell.value,
                "link": fio_cell.hyperlink.target if fio_cell.hyperlink else None,
                "call_count": row[calls_column - 1].value if calls_column else 0,
                "avg_score": row[score_column - 1].value if score_column else None
            }
            operators.append(operator_info)

        # Clean up
        os.remove(temp_file)
        return sheet_name, operators, None
    except Exception as e:
        return None, None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}"

@dp.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—Éüìë')
async def crtablee(message: types.Message):
    await bot.send_message(
        text='<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É –û–ö–öüñä</b>',
        chat_id=message.from_user.id,
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )
    await sv.crtable.set()
    await message.delete()

@dp.message_handler(state=sv.crtable)
async def tableName(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        is_admin_changing = await state.get_state() == sv.crtable.state and user_id == admin
        if not is_admin_changing and user_id not in SVlist:
            await bot.send_message(
                chat_id=user_id,
                text="–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.finish()
            return

        # Extract –§–ò–û, links, call counts, and scores from the spreadsheet
        sheet_name, operators, error = extract_fio_and_links(message.text)
        
        if error:
            await bot.send_message(
                chat_id=user_id,
                text=f"{error}\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É.</b>",
                parse_mode="HTML",
                reply_markup=get_cancel_keyboard()
            )
            return

        # Store the table URL and target SV ID (if admin)
        async with state.proxy() as data:
            data['table_url'] = message.text
            if is_admin_changing:
                data.setdefault('sv_id', user_id)

        # Format the message
        message_text = f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞:</b> {sheet_name}\n\n<b>–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        for op in operators:
            if op['link']:
                message_text += f"üë§ {op['name']} ‚Üí <a href='{op['link']}'>–°—Å—ã–ª–∫–∞</a>\n"
            else:
                message_text += f"üë§ {op['name']} ‚Üí –°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        message_text += "\n<b>–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã?</b>"

        # Send the message with verification buttons
        await bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode="HTML",
            reply_markup=get_verify_keyboard(),
            disable_web_page_preview=True
        )
        await sv.verify_table.set()
        await message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ tableName: {e}")
        await bot.send_message(
            chat_id=message.from_user.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )

@dp.callback_query_handler(state=sv.verify_table)
async def verify_table(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        table_url = data.get('table_url')
        sv_id = data.get('sv_id', callback.from_user.id)
    
    if callback.data == "verify_yes":
        # Save the table URL to SVlist
        SVlist[sv_id].table = table_url
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—Éüìë'))
        reply_markup = kb if sv_id == callback.from_user.id else get_editor_keyboard()
        target_id = callback.from_user.id if sv_id == callback.from_user.id else admin
        await bot.send_message(
            chat_id=target_id,
            text=f'<b>–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {SVlist[sv_id].name}‚úÖ</b>',
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await state.finish()
    elif callback.data == "verify_no":
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=f'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –û–ö–ö –¥–ª—è {SVlist[sv_id].name}üñä</b>',
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await sv.crtable.set()

# === –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π ==========================================================================================
def sync_fetch_text():
    response = requests.get(FETCH_URL)
    response.raise_for_status()
    return response.text

async def generate_weekly_report():
    try:
        output = BytesIO()
        workbook = xlsxwriter.Workbook(output, {'in_memory': True})
        header_format = workbook.add_format({
            'bold': True,
            'bg_color': '#D3D3D3',
            'border': 1
        })
        cell_format = workbook.add_format({'border': 1})
        current_week = get_current_week_of_month()
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        for sv_id, sv in SVlist.items():
            if not sv.table:
                continue
            sheet_name, operators, error = extract_fio_and_links(sv.table)
            if error:
                logging.error(f"Error processing table for SV {sv.name}: {error}")
                continue
            safe_sheet_name = sv.name[:31].replace('/', '_').replace('\\', '_').replace('?', '_').replace('*', '_').replace('[', '_').replace(']', '_')
            worksheet = workbook.add_worksheet(safe_sheet_name)
            headers = ['–§–ò–û', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤', '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª']
            for col, header in enumerate(headers):
                worksheet.write(0, col, header, header_format)
            for row, op in enumerate(operators, start=1):
                name = op.get('name', '')
                call_count = op.get('call_count', 0)
                avg_score = op.get('avg_score', None)
                if call_count in [None, "#DIV/0!"]:
                    call_count = 0
                else:
                    try:
                        call_count = int(call_count)
                    except (ValueError, TypeError):
                        call_count = 0
                try:
                    score_val = float(avg_score) if avg_score else ''
                except (ValueError, TypeError):
                    score_val = ''
                worksheet.write(row, 0, name, cell_format)
                worksheet.write(row, 1, call_count, cell_format)
                worksheet.write(row, 2, score_val, cell_format)
            worksheet.set_column('A:A', 30)
            worksheet.set_column('B:B', 20)
            worksheet.set_column('C:C', 15)
        workbook.close()
        output.seek(0)
        if output.getvalue():
            filename = f"Weekly_Report_Week{current_week}_{datetime.now().strftime('%Y%m%d')}.xlsx"
            await bot.send_document(
                chat_id=admin,
                document=('report.xlsx', output),
                caption=f"[{now}] üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {current_week}-—é –Ω–µ–¥–µ–ª—é",
                parse_mode='HTML'
            )
        else:
            await bot.send_message(
                chat_id=admin,
                text=f"[{now}] ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {current_week}-—é –Ω–µ–¥–µ–ª—é",
                parse_mode='HTML'
            )
    except Exception as e:
        logging.error(f"Error generating weekly report: {e}")
        await bot.send_message(
            chat_id=admin,
            text=f"[{now}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}",
            parse_mode='HTML'
        )

async def fetch_text_async():
    return await asyncio.to_thread(sync_fetch_text)

async def check_for_updates():
    global last_hash
    try:
        content = await fetch_text_async()
        current_hash = sha256(content.encode()).hexdigest()
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        if last_hash is None:
            await bot.send_message(admin, f"[{now}] ‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", parse_mode='HTML')
            last_hash = current_hash
        elif current_hash != last_hash:
            await bot.send_message(admin, f"[{now}] üìå –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å!", parse_mode='HTML')
            last_hash = current_hash
        else:
            logging.info(f"[{now}] No changes in spreadsheet data.")
    except Exception as e:
        print(f"[{datetime.now()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

async def generate_report():
    try:
        content = await fetch_text_async()
        df = pd.read_csv(StringIO(content))
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        await bot.send_message(admin, f"[{now}] üìä –û—Ç—á–µ—Ç: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤.", parse_mode='HTML')
    except Exception as e:
        print(f"[{datetime.now()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

# === –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ =============================================================================================
if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_for_updates, "interval", minutes=1)
    scheduler.add_job(generate_report, CronTrigger(day="10,20,30", hour=9, minute=0))
    scheduler.add_job(generate_weekly_report, CronTrigger(day_of_week='mon', hour=9, minute=0))  # Run every Monday at 9 AM
    scheduler.start()
    print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    executor.start_polling(dp, skip_updates=True)
