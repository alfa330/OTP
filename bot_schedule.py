import logging
import os
import threading
import asyncio
import pandas as pd
import requests
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from io import StringIO

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from flask import Flask

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
API_TOKEN = os.getenv('BOT_TOKEN')
admin     = int(os.getenv('ADMIN_ID', '0'))  # ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')
SHEET_NAME     = os.getenv('SHEET_NAME')

if not API_TOKEN or not SPREADSHEET_ID or not SHEET_NAME:
    raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN, SPREADSHEET_ID –∏ SHEET_NAME –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")

FETCH_URL = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv&sheet={SHEET_NAME}"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ‚Äî –¥–ª—è –ø–∏–Ω–≥–∞ ===
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is alive!", 200

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
last_hash = None

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.from_user.id == admin:
        await bot.send_message(
            chat_id=message.from_user.id,
            text="<b>–ë–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏ –ø—Ä–æ—Å–ª—É—à–µ–∫.",
            parse_mode='HTML'
        )

# === –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π ===
def sync_fetch_text():
    response = requests.get(FETCH_URL)
    response.raise_for_status()
    return response.text

async def fetch_text_async():
    return await asyncio.to_thread(sync_fetch_text)

async def check_for_updates():
    global last_hash
    try:
        content = await fetch_text_async()
        current_hash = hash(content)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        if last_hash is None:
            await bot.send_message(admin, f"[{now}] ‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", parse_mode='HTML')
            last_hash = current_hash
        elif current_hash != last_hash:
            await bot.send_message(admin, f"[{now}] üìå –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å!", parse_mode='HTML')
            last_hash = current_hash
        else:
            await bot.send_message(admin, f"[{now}] ‚úÖ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.", parse_mode='HTML')
    except Exception as e:
        print(f"[{datetime.now()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

async def generate_report():
    try:
        content = await fetch_text_async()
        df = pd.read_csv(StringIO(content))
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        await bot.send_message(admin, f"[{now}] üìä –û—Ç—á–µ—Ç: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤.", parse_mode='HTML')
    except Exception as e:
        print(f"[{datetime.now()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

# === –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask).start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_for_updates, "interval", minutes=1)
    scheduler.add_job(generate_report, CronTrigger(day="10,20,30", hour=9, minute=0))
    scheduler.start()
    print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
