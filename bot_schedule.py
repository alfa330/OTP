import logging
import os
import threading
import asyncio
import pandas as pd
import requests
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from io import StringIO

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton,InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from flask import Flask

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====================================================================================================
logging.basicConfig(level=logging.INFO)





# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ============================================================================================
API_TOKEN = os.getenv('BOT_TOKEN')
admin     = int(os.getenv('ADMIN_ID', '0'))  # ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')
SHEET_NAME     = os.getenv('SHEET_NAME')

if not API_TOKEN:
    raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")

FETCH_URL = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv&sheet={SHEET_NAME}"





# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ =================================================================================
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)




# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ‚Äî –¥–ª—è –ø–∏–Ω–≥–∞ =============================================================================
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is alive!", 200

def run_flask():
    app.run(host='0.0.0.0', port=8080)




# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ============================================================================================
last_hash = None




# === –ö–ª–∞—Å—Å—ã ==========================================================================================================

class new_sv(StatesGroup):
    svname = State()
    svid   = State()

class sv(StatesGroup):
    crtable = State()
    delete = State()

class SV:
    def __init__(self, name,id):
        self.name=name
        self.id=id
        self.table=''

SVlist={}



# === –ö–æ–º–∞–Ω–¥—ã =========================================================================================================
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.delete()
    if message.from_user.id == admin:
        kb=ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –°–í‚ûï'))
        kb.insert(KeyboardButton('–£–±—Ä–∞—Ç—å –°–í‚ùå'))
        await bot.send_message(
            chat_id=      message.from_user.id,
            text=         "<b>–ë–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏ –ø—Ä–æ—Å–ª—É—à–µ–∫.",
            parse_mode=   'HTML',
            reply_markup= kb 
        )
    else:
        await bot.send_message(
            chat_id=      message.from_user.id,
            text=         f"<b>–ë–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–¢–≤–æ–π <b>ID</b> —á—Ç–æ –±—ã –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ:\n\n<pre>{message.from_user.id}</pre>",
            parse_mode=   'HTML'
        )




# === –ê–¥–º–∏–Ω–∫–∞ =========================================================================================================
@dp.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å –°–í‚ûï')                              #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –°–í
async def newSv(message: types.message):
    await bot.send_message(text='<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–í, —ç—Ç–∞–ø</b>: 1 –∏–∑ 2üìç\n\n–§–ò–û –Ω–æ–≤–æ–≥–æ –°–íüñä',
                            chat_id=message.from_user.id,
                            parse_mode='HTML',
                            reply_markup= ReplyKeyboardRemove())
    await new_sv.svname.set()

@dp.message_handler(state=new_sv.svname)                                #–ò–ú–Ø
async def newSVname(message: types.message, state: FSMContext):
    async with state.proxy() as data:
        data['svname'] = message.text
    await message.answer(text=f'–ö–ª–∞—Å—Å, –§–ò–û - <b>{message.text}</b>\n\n<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–í, —ç—Ç–∞–ø</b>: 2 –∏–∑ 2üìç\n\n–ù–∞–ø–∏—à–∏—Ç–µ <b>ID</b> –Ω–æ–≤–æ–≥–æ –°–íüÜî',parse_mode='HTML')
    await new_sv.next()
    await message.delete()

@dp.message_handler(state=new_sv.svid)                                  #id
async def newSVid(message: types.message, state: FSMContext):
    kb=ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—Éüìë'))
    try:
        async with state.proxy() as data:
            data['svid'] = int(message.text)
        await bot.send_message(
                chat_id=      int(message.text),
                text=         f"–ü—Ä–∏–Ω—è—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ <b>—É—Å–ø–µ—à–Ω–æ‚úÖ</b>\n\n–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –ù–∞–∂–º–∏—Ç–µ <b>–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—Éüìë</b> —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ.",
                parse_mode=   'HTML',
                reply_markup= kb
        )

        SVlist[data['svid']] = SV(data['svname'],data['svid'])          #–î–æ–±–∞–≤–∏–ª –≤ –ª–∏—Å—Ç –°–í
        kb=ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –°–í‚ûï'))
        kb.insert(KeyboardButton('–£–±—Ä–∞—Ç—å –°–í‚ùå'))
        await message.answer(text=f'–ö–ª–∞—Å—Å, ID - <b>{message.text}</b>\n\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–í –ø—Ä–æ—à–ª–æ <b>—É—Å–ø–µ—à–Ω–æ‚úÖ</b>. –ù–æ–≤–æ–º—É —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—É –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞üëåüèº',
                             parse_mode='HTML',
                             reply_markup= kb
                             )
        await state.finish()
    except: 
        await message.answer(text='–û–π, –ø–æ—Ö–æ–∂–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—Ç <b>ID</b>‚ùå\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>',parse_mode='HTML')
    await message.delete()

@dp.message_handler(regexp='–£–±—Ä–∞—Ç—å –°–í‚ùå')                                #–£–¥–∞–ª–µ–Ω–∏–µ –°–í
async def delSv(message: types.message):
    if SVlist:
        await bot.send_message(text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –°–í –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∏—Å–∫–ª—é—á–∏—Ç—åüñä</b>',
                            chat_id=admin,
                            parse_mode='HTML',
                            reply_markup= ReplyKeyboardRemove()
                            )
        ikb=InlineKeyboardMarkup(row_width=1)
        for i in SVlist:
            ikb.insert(InlineKeyboardButton(text=SVlist[i].name,callback_data=str(i)))
        await bot.send_message(text='<b>–õ–∏—Å—Ç –°–í:</b>',
                                chat_id=admin,
                                parse_mode='HTML',
                                reply_markup=ikb
                                )
        await sv.delete.set()
    else:
        kb=ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –°–í‚ûï'))
        kb.insert(KeyboardButton('–£–±—Ä–∞—Ç—å –°–í‚ùå'))
        await bot.send_message(text='<b>–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –°–íü§•</b>',
                                chat_id=admin,
                                parse_mode='HTML',
                                reply_markup= kb
                                )
    await message.delete()
    
@dp.callback_query_handler(state=sv.delete)
async def delSVcall(callback: types.CallbackQuery, state: FSMContext):
    SV = SVlist[int(callback.data)]
    del SVlist[int(callback.data)]
    kb=ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –°–í‚ûï'))
    kb.insert(KeyboardButton('–£–±—Ä–∞—Ç—å –°–í‚ùå'))
    await bot.send_message(text=f"–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä <b>{SV.name}</b> —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã‚úÖ",
                            chat_id=admin,
                            parse_mode='HTML',
                            reply_markup= kb
    )

    await bot.delete_message(chat_id = callback.from_user.id, message_id = callback.message.message_id)

    await bot.send_message(text=f"–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã‚ùå",
                           chat_id=SV.id,
                           parse_mode='HTML',
                           reply_markup= ReplyKeyboardRemove()
    )
    await state.finish()



# === –†–∞–±–æ—Ç–∞ —Å –°–í =====================================================================================================
@dp.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—Éüìë')                            
async def crtablee(message: types.message):
    await bot.send_message(text='<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É –û–ö–öüñä</b>',
                            chat_id = message.from_user.id,
                            parse_mode = 'HTML',
                            reply_markup= ReplyKeyboardRemove()
                            )
    await sv.crtable.set()
    await message.delete()

@dp.message_handler(state=sv.crtable)
async def tableName(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ SVlist
        if message.from_user.id not in SVlist:
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode="HTML"
            )
            await state.finish()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        SVlist[message.from_user.id].table = message.text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=message.from_user.id,
            text='<b>–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞‚úÖ</b>',
            parse_mode='HTML'
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–û—à–∏–±–∫–∞ –≤ tableName: {e}")
        await bot.send_message(
            chat_id=message.from_user.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="HTML"
        )
        await state.finish()
    

# === –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π ===============================================================================================
def sync_fetch_text():
    response = requests.get(FETCH_URL)
    response.raise_for_status()
    return response.text

async def fetch_text_async():
    return await asyncio.to_thread(sync_fetch_text)

async def check_for_updates():
    global last_hash
    try:
        content = await fetch_text_async()
        current_hash = hash(content)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        if last_hash is None:
            await bot.send_message(admin, f"[{now}] ‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", parse_mode='HTML')
            last_hash = current_hash
        elif current_hash != last_hash:
            await bot.send_message(admin, f"[{now}] üìå –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å!", parse_mode='HTML')
            last_hash = current_hash
    except Exception as e:
        print(f"[{datetime.now()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

async def generate_report():
    try:
        content = await fetch_text_async()
        df = pd.read_csv(StringIO(content))
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        await bot.send_message(admin, f"[{now}] üìä –û—Ç—á–µ—Ç: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤.", parse_mode='HTML')
    except Exception as e:
        print(f"[{datetime.now()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")





# === –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ==================================================================================================
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask).start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_for_updates, "interval", minutes=1)
    scheduler.add_job(generate_report, CronTrigger(day="10,20,30", hour=9, minute=0))
    scheduler.start()
    print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
